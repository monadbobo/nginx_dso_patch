diff -ruN nginx-1.3.4/auto/cc/conf nginx-1.3.4-dso/auto/cc/conf
--- nginx-1.3.4/auto/cc/conf	2012-07-24 23:17:03.000000000 +0800
+++ nginx-1.3.4-dso/auto/cc/conf	2012-08-06 12:06:41.525890024 +0800
@@ -11,6 +11,7 @@
 ngx_binout="-o "
 ngx_objext="o"
 ngx_binext=
+ngx_soext=".so"
 
 ngx_long_start=
 ngx_long_end=
diff -ruN nginx-1.3.4/auto/init nginx-1.3.4-dso/auto/init
--- nginx-1.3.4/auto/init	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/auto/init	2012-08-06 12:04:39.306906111 +0800
@@ -16,6 +16,9 @@
 NGX_ERR=$NGX_OBJS/autoconf.err
 MAKEFILE=$NGX_OBJS/Makefile
 
+#dso
+NGX_DSO_COMPILE=$NGX_OBJS/dso_tools
+NGX_MODULE_ORDER=$NGX_OBJS/module_order
 
 NGX_PCH=
 NGX_USE_PCH=
diff -ruN nginx-1.3.4/auto/install nginx-1.3.4-dso/auto/install
--- nginx-1.3.4/auto/install	2012-07-07 17:35:30.000000000 +0800
+++ nginx-1.3.4-dso/auto/install	2012-08-06 12:06:11.072423334 +0800
@@ -73,6 +73,16 @@
 esac
 
 
+case ".$NGX_DSO_PATH" in
+    ./*)
+    ;;
+
+    *)
+        NGX_DSO_PATH=$NGX_PREFIX/$NGX_DSO_PATH
+    ;;
+esac
+
+
 if test -f man/nginx.8 ; then
     NGX_MAN=man/nginx.8
 else
@@ -96,8 +106,27 @@
 		-e "s|%%ERROR_LOG_PATH%%|${NGX_ERROR_LOG_PATH:-stderr}|" \\
 		< $NGX_MAN > \$@
 
+END
+
+if test -n "$NGX_SHARED_MODULES"; then
+
+cat << END                                                    >> $NGX_MAKEFILE
+
+install:	all \
+		$NGX_INSTALL_PERL_MODULES
+END
+
+else
+cat << END                                                    >> $NGX_MAKEFILE
+
 install:	$NGX_OBJS${ngx_dirsep}nginx${ngx_binext} \
 		$NGX_INSTALL_PERL_MODULES
+END
+
+fi
+
+cat << END                                                    >> $NGX_MAKEFILE
+
 	test -d '\$(DESTDIR)$NGX_PREFIX' || mkdir -p '\$(DESTDIR)$NGX_PREFIX'
 
 	test -d '\$(DESTDIR)`dirname "$NGX_SBIN_PATH"`' \
@@ -160,6 +189,34 @@
 END
 
 fi
+
+
+if [ $NGX_DSO = YES ] ; then
+
+    cat << END                                                >> $NGX_MAKEFILE
+	test -d '\$(DESTDIR)$NGX_DSO_PATH' \
+		|| mkdir -p '\$(DESTDIR)$NGX_DSO_PATH'
+END
+
+    for ngx_dso_module in $NGX_DSO_ALL_TARGETS
+    do
+        cat << END                                                >> $NGX_MAKEFILE
+
+	cp $ngx_dso_module \$(DESTDIR)$NGX_DSO_PATH
+
+END
+    done
+
+    cat << END                                                >> $NGX_MAKEFILE
+
+	test -f '\$(DESTDIR)$NGX_CONF_PREFIX/module_order' \
+		|| cp $NGX_MODULE_ORDER '\$(DESTDIR)$NGX_CONF_PREFIX'
+	cp $NGX_MODULE_ORDER '\$(DESTDIR)$NGX_CONF_PREFIX/module_order'
+	chmod 0755 $NGX_DSO_COMPILE
+	cp $NGX_DSO_COMPILE '$NGX_PREFIX/sbin'
+END
+
+fi
 
 
 # create Makefile
diff -ruN nginx-1.3.4/auto/lib/conf nginx-1.3.4-dso/auto/lib/conf
--- nginx-1.3.4/auto/lib/conf	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/auto/lib/conf	2012-08-06 12:04:21.510801726 +0800
@@ -70,7 +70,7 @@
     . auto/lib/perl/conf
 fi
 
-if [ $HTTP_GEOIP = YES ]; then
+if [ $HTTP_GEOIP = YES ] || [ $HTTP_GEOIP_SHARED = YES ]; then
     . auto/lib/geoip/conf
 fi
 
diff -ruN nginx-1.3.4/auto/lib/geoip/conf nginx-1.3.4-dso/auto/lib/geoip/conf
--- nginx-1.3.4/auto/lib/geoip/conf	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/auto/lib/geoip/conf	2012-08-06 12:04:00.058673453 +0800
@@ -64,8 +64,11 @@
 
 
 if [ $ngx_found = yes ]; then
-    CORE_LIBS="$CORE_LIBS $ngx_feature_libs"
-
+   if [ $HTTP_GEOIP_SHARED = YES ]; then
+       DSO_LIBS="$DSO_LIBS|$HTTP_GEOIP_MODULE:$ngx_feature_libs"
+   else
+       CORE_LIBS="$CORE_LIBS $ngx_feature_libs"
+   fi
 else
 
 cat << END
diff -ruN nginx-1.3.4/auto/make nginx-1.3.4-dso/auto/make
--- nginx-1.3.4/auto/make	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/auto/make	2012-08-06 12:07:26.314343496 +0800
@@ -3,6 +3,17 @@
 # Copyright (C) Nginx, Inc.
 
 
+if test -n "$NGX_SHARED_MODULES"; then
+    if [ $NGX_DSO != YES ]; then
+    cat << END
+
+when you use shared modules, you should enable dso module.
+END
+        exit 1
+    fi
+fi
+
+
 echo "creating $NGX_MAKEFILE"
 
 mkdir -p $NGX_OBJS/src/core $NGX_OBJS/src/event $NGX_OBJS/src/event/modules \
@@ -10,7 +21,8 @@
          $NGX_OBJS/src/http $NGX_OBJS/src/http/modules \
 	 $NGX_OBJS/src/http/modules/perl \
          $NGX_OBJS/src/mail \
-         $NGX_OBJS/src/misc
+         $NGX_OBJS/src/misc \
+         $NGX_OBJS/dso_modules
 
 
 ngx_objs_dir=$NGX_OBJS$ngx_regex_dirsep
@@ -45,6 +57,8 @@
 
 END
 
+dso_all_incs=$ngx_include_opt$ngx_incs
+
 
 ngx_all_srcs="$CORE_SRCS"
 
@@ -68,6 +82,9 @@
 
 END
 
+dso_core_deps=$ngx_deps
+dso_core_incs=$ngx_include_opt$ngx_incs
+
 
 # the http dependences and include pathes
 
@@ -92,6 +109,9 @@
 
 END
 
+dso_http_deps=$ngx_deps
+dso_http_incs=$ngx_include_opt$ngx_incs
+
 fi
 
 
@@ -186,6 +206,25 @@
     | sed -e "s/\//$ngx_regex_dirsep/g" -e "s/^/$ngx_long_regex_cont/"`}
 
 
+for ngx_shared_modules in $NGX_SHARED_MODULES
+do
+    NGX_DSO_ALL_TARGETS="$NGX_DSO_ALL_TARGETS $NGX_OBJS${ngx_dirsep}dso_modules${ngx_dirsep}${ngx_shared_modules}${ngx_soext}"
+done
+
+if test -n "$NGX_DSO_ALL_TARGETS"; then
+
+ngx_dso_target=`echo $NGX_DSO_ALL_TARGETS \
+        | sed -e "s/  *\([^ ][^ ]*\)/$ngx_long_regex_cont\1/g" \
+              -e "s/\//$ngx_regex_dirsep/g"`
+
+cat << END                                                    >> $NGX_MAKEFILE
+
+all:	$NGX_OBJS${ngx_dirsep}nginx${ngx_binext} $ngx_dso_target
+	
+END
+
+fi
+
 cat << END                                                    >> $NGX_MAKEFILE
 
 $NGX_OBJS${ngx_dirsep}nginx${ngx_binext}:	$ngx_deps$ngx_spacer
@@ -415,3 +454,181 @@
 END
 
 fi
+
+
+if [ $NGX_DSO = YES ] ; then
+
+    ngx_dso_cflag=" -fPIC "
+    ngx_dso_link_flag=" -shared "
+    ngx_dso_index=2
+
+    ngx_cc="\$(CC) $ngx_compile_opt \$(CFLAGS) \$(CORE_INCS) \$(HTTP_INCS)"
+
+    for ngx_shared_modules in $NGX_SHARED_MODULES
+    do
+        ngx_dso_all_objs=
+        ngx_dso_srcs=`echo  $NGX_SHARED_SRCS \
+            | awk -v dso_index=$ngx_dso_index 'BEGIN { FS="|" } {print $dso_index}'`
+
+        for ngx_source in $ngx_dso_srcs
+        do
+            ngx_src=`echo $ngx_source | sed -e "s/\//$ngx_regex_dirsep/g"`
+            ngx_obj=`echo $ngx_src \
+                | sed -e "s#^\(.*\.\)cpp\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)cc\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)c\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)S\\$#$ngx_objs_dir\1$ngx_objext#g"`
+
+            ngx_dso_all_objs="$ngx_dso_all_objs $ngx_obj"
+
+        done
+
+        ngx_dso_feture_path=`echo $DSO_INCS | awk 'BEGIN { FS="|" } \
+            {for (i=1; i<=NF; i++) print $i}' | awk -v module_name=$ngx_shared_modules \
+            'BEGIN { FS=":"} {if ($1 == module_name) print $2}'`
+
+        for ngx_source in $ngx_dso_srcs
+        do
+            ngx_src=`echo $ngx_source | sed -e "s/\//$ngx_regex_dirsep/g"`
+            ngx_obj=`echo $ngx_src \
+                | sed -e "s#^\(.*\.\)cpp\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)cc\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)c\\$#$ngx_objs_dir\1$ngx_objext#g" \
+                -e "s#^\(.*\.\)S\\$#$ngx_objs_dir\1$ngx_objext#g"`
+
+            cat << END                                            >> $NGX_MAKEFILE
+
+$ngx_obj:	\$(CORE_DEPS) \$(HTTP_DEPS)$ngx_cont$ngx_src
+	$ngx_cc$ngx_dso_cflag $ngx_dso_feture_path$ngx_tab$ngx_objout$ngx_obj$ngx_tab$ngx_src$NGX_AUX
+
+END
+
+        done
+        ngx_dso_deps=`echo $ngx_dso_all_objs $ngx_res $LINK_DEPS \
+            | sed -e "s/  *\([^ ][^ ]*\)/$ngx_regex_cont\1/g" \
+            -e "s/\//$ngx_regex_dirsep/g"`
+
+        ngx_dso_objs=`echo $ngx_dso_all_objs \
+            | sed -e "s/  *\([^ ][^ ]*\)/$ngx_long_regex_cont\1/g" \
+            -e "s/\//$ngx_regex_dirsep/g"`
+
+        ngx_dso_link=${CORE_LINK:+`echo $CORE_LINK \
+            | sed -e "s/\//$ngx_regex_dirsep%%/g" -e "s/^/$ngx_long_regex_cont/"`}
+
+        ngx_dso_feture_lib=`echo $DSO_LIBS | awk 'BEGIN { FS="|" } \
+            {for (i=1; i<=NF; i++) print $i}' | awk -v module_name=$ngx_shared_modules \
+            'BEGIN { FS=":"} {if ($1 == module_name) print $2}'`
+
+        cat << END                                                    >> $NGX_MAKEFILE
+
+$NGX_OBJS${ngx_dirsep}dso_modules${ngx_dirsep}${ngx_shared_modules}${ngx_soext}:	$ngx_dso_deps$ngx_spacer
+	\$(LINK)${ngx_dso_link_flag} ${ngx_long_start}${ngx_binout} $NGX_OBJS/dso_modules${ngx_dirsep}${ngx_shared_modules}${ngx_soext}$ngx_long_cont$ngx_dso_objs$ngx_libs$ngx_dso_link $ngx_dso_feture_lib
+	$ngx_rcc
+${ngx_long_end}
+END
+
+        ngx_dso_index=$(($ngx_dso_index+1))
+    done
+
+    core_deps_temp=
+    core_incs_temp=
+    http_deps_temp=
+    http_incs_temp=
+    all_incs_temp=
+
+    for dai in $dso_all_incs
+    do
+        if [ "$dai" = "-I" ]; then
+            all_incs_temp="$all_incs_temp $dai"
+        elif [ "$dai" = "\\" ]; then
+            all_incs_temp="$all_incs_temp \\"
+        elif test -n "$dai"; then
+            all_incs_temp="$all_incs_temp $dai"
+        fi
+    done
+
+    for cdep in $dso_core_deps
+    do
+        if test -n "$cdep"; then
+            core_deps_temp="$core_deps_temp $cdep"
+        fi
+    done
+
+    for dci in $dso_core_incs
+    do
+        if [ "$dci" = "-I" ]; then
+            core_incs_temp="$core_incs_temp $dci"
+        elif [ "$dci" = "\\" ]; then
+            core_incs_temp="$core_incs_temp \\"
+        elif test -n "$dci"; then
+            core_incs_temp="$core_incs_temp $dci"
+        fi
+    done
+
+    for hdep in $dso_http_deps
+    do
+        if test -n "$hdep"; then
+            http_deps_temp="$http_deps_temp $hdep"
+        fi
+    done
+
+    for dhi in $dso_http_incs
+    do
+        if [ "$dhi" = "-I" ]; then
+            http_incs_temp="$http_incs_temp $dhi"
+        elif [ "$dhi" = "\\" ]; then
+            http_incs_temp="$http_incs_temp \\"
+        elif test -n "$dhi"; then
+            http_incs_temp="$http_incs_temp $dhi"
+        fi
+    done
+
+    cat << END                                            > $NGX_DSO_COMPILE
+#!/bin/sh
+
+ngx_soext='.so'
+CC=$CC
+CFLAGS='$CFLAGS -fPIC'
+CPP='$CPP'
+LINK='$LINK  -fPIC -shared'
+
+
+CORE_LIBS='$CORE_LIBS'
+CORE_LINK='$ngx_link'
+
+NGX_LD_OPT='$NGX_LD_OPT'
+NGX_PREFIX=$NGX_PREFIX
+
+ngx_regex_dirsep='$ngx_regex_dirsep'
+ngx_cont='$ngx_cont'
+ngx_cc='$ngx_cc'
+ngx_tab='$ngx_tab'
+ngx_objout='$ngx_objout'
+NGX_AUX='$NGX_AUX'
+ngx_long_regex_cont='$ngx_long_regex_cont'
+ngx_dirsep='$ngx_dirsep'
+ngx_binext='$ngx_binext'
+ngx_long_start='$ngx_long_start'
+ngx_long_cont='$ngx_long_cont'
+ngx_rcc='$ngx_rcc'
+ngx_spacer='$ngx_spacer'
+ngx_objext='$ngx_objext'
+ngx_regex_cont='$ngx_regex_cont'
+ngx_binout='$ngx_binout'
+ngx_binout='$ngx_binout'
+NGX_DSO_PATH=$NGX_DSO_PATH
+NGX_AUTOCONF_ERR=$NGX_AUTOCONF_ERR
+NGX_AUTOTEST=$NGX_AUTOTEST
+NGX_AUTO_CONFIG_H=$NGX_AUTO_CONFIG_H
+
+END
+
+    sed -e "s|%%ALL_INCS%%|'$all_incs_temp'|g" \
+	-e "s|%%CORE_DEPS%%|'$core_deps_temp'|g" \
+	-e "s|%%CORE_INCS%%|'$core_incs_temp'|g" \
+	-e "s|%%HTTP_DEPS%%|'$http_deps_temp'|g" \
+	-e "s|%%HTTP_INCS%%|'$http_incs_temp'|g" \
+	-e "s|%%NGX_SOURCE_HOME%%|`pwd`|g" \
+	-e "s|%%ngx_soext%%|'\.so'|g" \
+	contrib/dso.in >> $NGX_DSO_COMPILE
+fi
diff -ruN nginx-1.3.4/auto/modules nginx-1.3.4-dso/auto/modules
--- nginx-1.3.4/auto/modules	2012-06-21 19:02:22.000000000 +0800
+++ nginx-1.3.4-dso/auto/modules	2012-08-06 12:28:14.374203574 +0800
@@ -61,6 +61,17 @@
 fi
 
 
+if [ $NGX_DSO = YES ] ; then
+    have=NGX_DSO . auto/have
+    have=NGX_DSO_MAX value="$NGX_DSO_MAX" . auto/define
+    have=NGX_DSO_PATH value="\"$NGX_DSO_PATH\"" . auto/define
+    CORE_MODULES="$CORE_MODULES $DSO_MODULE"
+    CORE_SRCS="$CORE_SRCS $DSO_SRCS"
+    CORE_LIBS="$CORE_LIBS $NGX_LIBDL"
+    LINK="$LINK -rdynamic"
+fi
+
+
 if [ $HTTP != YES ]; then
     have=NGX_CRYPT . auto/nohave
     CRYPT_LIB=
@@ -144,33 +155,65 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_CHARSET_SRCS"
 fi
 
+if [ $HTTP_CHARSET_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_CHARSET_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_CHARSET_SRCS"
+fi
+
 if [ $HTTP_XSLT = YES ]; then
     USE_LIBXSLT=YES
     HTTP_FILTER_MODULES="$HTTP_FILTER_MODULES $HTTP_XSLT_FILTER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_XSLT_SRCS"
 fi
 
+if [ $HTTP_XSLT_SHARED = YES ]; then
+    USE_LIBXSLT=YES
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_XSLT_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_XSLT_SRCS"
+fi
+
 if [ $HTTP_IMAGE_FILTER = YES ]; then
     USE_LIBGD=YES
     HTTP_FILTER_MODULES="$HTTP_FILTER_MODULES $HTTP_IMAGE_FILTER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_IMAGE_SRCS"
 fi
 
+if [ $HTTP_IMAGE_FILTER_SHARED = YES ]; then
+    USE_LIBGD=YES
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_IMAGE_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_IMAGE_SRCS"
+fi
+
 if [ $HTTP_SUB = YES ]; then
     HTTP_FILTER_MODULES="$HTTP_FILTER_MODULES $HTTP_SUB_FILTER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_SUB_SRCS"
 fi
 
+if [ $HTTP_SUB_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_SUB_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_SUB_SRCS"
+fi
+
 if [ $HTTP_ADDITION = YES ]; then
     HTTP_FILTER_MODULES="$HTTP_FILTER_MODULES $HTTP_ADDITION_FILTER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_ADDITION_SRCS"
 fi
 
+if [ $HTTP_ADDITION_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_ADDITION_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_ADDITION_SRCS"
+fi
+
 if [ $HTTP_USERID = YES ]; then
     HTTP_FILTER_MODULES="$HTTP_FILTER_MODULES $HTTP_USERID_FILTER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_USERID_SRCS"
 fi
 
+if [ $HTTP_USERID_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_USERID_FILTER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_USERID_SRCS"
+fi
+
 HTTP_MODULES="$HTTP_MODULES $HTTP_STATIC_MODULE"
 
 if [ $HTTP_GZIP_STATIC = YES ]; then
@@ -190,6 +233,11 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_AUTOINDEX_SRCS"
 fi
 
+if [ $HTTP_AUTOINDEX_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_AUTOINDEX_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_AUTOINDEX_SRCS"
+fi
+
 HTTP_MODULES="$HTTP_MODULES $HTTP_INDEX_MODULE"
 
 if [ $HTTP_RANDOM_INDEX = YES ]; then
@@ -197,6 +245,11 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_RANDOM_INDEX_SRCS"
 fi
 
+if [ $HTTP_RANDOM_INDEX_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_RANDOM_INDEX_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_RANDOM_INDEX_SRCS"
+fi
+
 if [ $HTTP_AUTH_BASIC = YES ]; then
     USE_MD5=YES
     USE_SHA1=YES
@@ -211,16 +264,31 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_ACCESS_SRCS"
 fi
 
+if [ $HTTP_ACCESS_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_ACCESS_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_ACCESS_SRCS"
+fi
+
 if [ $HTTP_LIMIT_CONN = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_LIMIT_CONN_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_LIMIT_CONN_SRCS"
 fi
 
+if [ $HTTP_LIMIT_CONN_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_LIMIT_CONN_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_LIMIT_CONN_SRCS"
+fi
+
 if [ $HTTP_LIMIT_REQ = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_LIMIT_REQ_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_LIMIT_REQ_SRCS"
 fi
 
+if [ $HTTP_LIMIT_REQ_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_LIMIT_REQ_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_LIMIT_REQ_SRCS"
+fi
+
 if [ $HTTP_REALIP = YES ]; then
     have=NGX_HTTP_REALIP . auto/have
     have=NGX_HTTP_X_FORWARDED_FOR . auto/have
@@ -233,7 +301,13 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_STATUS_SRCS"
 fi
 
+if [ $HTTP_STATUS_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_STATUS_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_STATUS_SRCS"
+fi
+
 if [ $HTTP_GEO = YES ]; then
+    have=NGX_HTTP_GEO . auto/have
     have=NGX_HTTP_X_FORWARDED_FOR . auto/have
     HTTP_MODULES="$HTTP_MODULES $HTTP_GEO_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_GEO_SRCS"
@@ -245,27 +319,53 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_GEOIP_SRCS"
 fi
 
+if [ $HTTP_GEOIP_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_GEOIP_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_GEOIP_SRCS"
+fi
+
 if [ $HTTP_MAP = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_MAP_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_MAP_SRCS"
 fi
 
+if [ $HTTP_MAP_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_MAP_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_MAP_SRCS"
+fi
+
 if [ $HTTP_SPLIT_CLIENTS = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_SPLIT_CLIENTS_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_SPLIT_CLIENTS_SRCS"
 fi
 
+if [ $HTTP_SPLIT_CLIENTS_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_SPLIT_CLIENTS_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_SPLIT_CLIENTS_SRCS"
+fi
+
 if [ $HTTP_REFERER = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_REFERER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_REFERER_SRCS"
 fi
 
+if [ $HTTP_REFERER_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_REFERER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_REFERER_SRCS"
+fi
+
 if [ $HTTP_REWRITE = YES -a $USE_PCRE != DISABLED ]; then
     USE_PCRE=YES
     HTTP_MODULES="$HTTP_MODULES $HTTP_REWRITE_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_REWRITE_SRCS"
 fi
 
+if [ $HTTP_REWRITE_SHARED = YES -a $USE_PCRE != DISABLED ]; then
+    USE_PCRE=YES
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_REWRITE_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_REWRITE_SRCS"
+fi
+
 if [ $HTTP_SSL = YES ]; then
     USE_OPENSSL=YES
     have=NGX_HTTP_SSL . auto/have
@@ -275,6 +375,7 @@
 fi
 
 if [ $HTTP_PROXY = YES ]; then
+    have=NGX_HTTP_PROXY . auto/have
     have=NGX_HTTP_X_FORWARDED_FOR . auto/have
     #USE_MD5=YES
     HTTP_MODULES="$HTTP_MODULES $HTTP_PROXY_MODULE"
@@ -287,16 +388,31 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_FASTCGI_SRCS"
 fi
 
+if [ $HTTP_FASTCGI_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_FASTCGI_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_FASTCGI_SRCS"
+fi
+
 if [ $HTTP_UWSGI = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_UWSGI_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_UWSGI_SRCS"
 fi
 
+if [ $HTTP_UWSGI_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_UWSGI_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_UWSGI_SRCS"
+fi
+
 if [ $HTTP_SCGI = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_SCGI_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_SCGI_SRCS"
 fi
 
+if [ $HTTP_SCGI_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_SCGI_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_SCGI_SRCS"
+fi
+
 if [ $HTTP_PERL = YES ]; then
     USE_PERL=YES
     HTTP_MODULES="$HTTP_MODULES $HTTP_PERL_MODULE"
@@ -310,22 +426,43 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_MEMCACHED_SRCS"
 fi
 
+if [ $HTTP_MEMCACHED_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_MEMCACHED_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_MEMCACHED_SRCS"
+fi
+
 if [ $HTTP_EMPTY_GIF = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_EMPTY_GIF_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_EMPTY_GIF_SRCS"
 fi
 
+if [ $HTTP_EMPTY_GIF_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_EMPTY_GIF_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_EMPTY_GIF_SRCS"
+fi
+
 if [ $HTTP_BROWSER = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_BROWSER_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_BROWSER_SRCS"
 fi
 
+if [ $HTTP_BROWSER_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_BROWSER_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_BROWSER_SRCS"
+fi
+
 if [ $HTTP_SECURE_LINK = YES ]; then
     USE_MD5=YES
     HTTP_MODULES="$HTTP_MODULES $HTTP_SECURE_LINK_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_SECURE_LINK_SRCS"
 fi
 
+if [ $HTTP_SECURE_LINK_SHARED = YES ]; then
+    USE_MD5=YES
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_SECURE_LINK_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_SECURE_LINK_SRCS"
+fi
+
 if [ $HTTP_DEGRADATION = YES ]; then
     have=NGX_HTTP_DEGRADATION . auto/have
     HTTP_MODULES="$HTTP_MODULES $HTTP_DEGRADATION_MODULE"
@@ -337,21 +474,41 @@
     HTTP_SRCS="$HTTP_SRCS $HTTP_FLV_SRCS"
 fi
 
+if [ $HTTP_FLV_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_FLV_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_FLV_SRCS"
+fi
+
 if [ $HTTP_MP4 = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_MP4_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_MP4_SRCS"
 fi
 
+if [ $HTTP_MP4_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_MP4_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_MP4_SRCS"
+fi
+
 if [ $HTTP_UPSTREAM_IP_HASH = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_UPSTREAM_IP_HASH_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_UPSTREAM_IP_HASH_SRCS"
 fi
 
+if [ $HTTP_UPSTREAM_IP_HASH_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_UPSTREAM_IP_HASH_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_UPSTREAM_IP_HASH_SRCS"
+fi
+
 if [ $HTTP_UPSTREAM_LEAST_CONN = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_UPSTREAM_LEAST_CONN_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_UPSTREAM_LEAST_CONN_SRCS"
 fi
 
+if [ $HTTP_UPSTREAM_LEAST_CONN_SHARED = YES ]; then
+    NGX_SHARED_MODULES="$NGX_SHARED_MODULES $HTTP_UPSTREAM_LEAST_CONN_MODULE"
+    NGX_SHARED_SRCS="$NGX_SHARED_SRCS|$HTTP_UPSTREAM_LEAST_CONN_SRCS"
+fi
+
 if [ $HTTP_UPSTREAM_KEEPALIVE = YES ]; then
     HTTP_MODULES="$HTTP_MODULES $HTTP_UPSTREAM_KEEPALIVE_MODULE"
     HTTP_SRCS="$HTTP_SRCS $HTTP_UPSTREAM_KEEPALIVE_SRCS"
@@ -394,7 +551,6 @@
     USE_OPENSSL=YES
 fi
 
-
 modules="$CORE_MODULES $EVENT_MODULES"
 
 
@@ -491,8 +647,50 @@
     echo "    &$mod,"                         >> $NGX_MODULES_C
 done
 
+if [ $NGX_DSO = YES ] ; then
+
+    for i in `seq 1 $NGX_DSO_MAX`
+    do
+        echo '    NULL,'                          >> $NGX_MODULES_C
+    done
+
+fi
+
+echo '    NULL'                               >> $NGX_MODULES_C
+echo '};'                                     >> $NGX_MODULES_C
+
+echo                                          >> $NGX_MODULES_C
+echo 'const char *ngx_module_names[] = {'     >> $NGX_MODULES_C
+
+for mod in $modules
+do
+    echo "    \"$mod\","                      >> $NGX_MODULES_C
+done
+
 cat << END                                    >> $NGX_MODULES_C
     NULL
 };
 
 END
+
+if [ $NGX_DSO = YES ] ; then
+    echo                                          >> $NGX_MODULES_C
+    echo 'const char *ngx_all_module_names[] = {' >> $NGX_MODULES_C
+
+    for mod in $NGX_ALL_MODULES
+    do
+        echo "    \"$mod\","                      >> $NGX_MODULES_C
+    done
+
+    cat << END                                    >> $NGX_MODULES_C
+    NULL
+};
+
+END
+
+for mod in $NGX_ALL_MODULES
+    do
+        echo "$mod;"                          >> $NGX_MODULE_ORDER
+    done
+
+fi
diff -ruN nginx-1.3.4/auto/options nginx-1.3.4-dso/auto/options
--- nginx-1.3.4/auto/options	2012-06-04 07:21:26.000000000 +0800
+++ nginx-1.3.4-dso/auto/options	2012-08-06 12:28:31.129294319 +0800
@@ -15,6 +15,9 @@
 NGX_USER=
 NGX_GROUP=
 
+NGX_DSO_PATH=
+NGX_SOURCE_PATH=`pwd`
+
 CC=${CC:-gcc}
 CPP=
 NGX_OBJS=objs
@@ -47,6 +50,93 @@
 NGX_FILE_AIO=NO
 NGX_IPV6=NO
 
+NGX_DSO=YES
+NGX_DSO_MAX=128
+NGX_ALL_MODULES="
+    ngx_core_module
+    ngx_errlog_module
+    ngx_conf_module
+    ngx_events_module
+    ngx_event_core_module
+    ngx_rtsig_module
+    ngx_epoll_module
+    ngx_select_module
+    ngx_poll_module
+    ngx_openssl_module
+    ngx_regex_module
+    ngx_http_module
+    ngx_http_core_module
+    ngx_http_log_module
+    ngx_http_upstream_module
+    ngx_http_static_module
+    ngx_http_gzip_static_module
+    ngx_http_dav_module
+    ngx_http_autoindex_module
+    ngx_http_index_module
+    ngx_http_random_index_module
+    ngx_http_auth_basic_module
+    ngx_http_access_module
+    ngx_http_limit_conn_module
+    ngx_http_limit_req_module
+    ngx_http_realip_module
+    ngx_http_geo_module
+    ngx_http_geoip_module
+    ngx_http_map_module
+    ngx_http_split_clients_module
+    ngx_http_referer_module
+    ngx_http_rewrite_module
+    ngx_http_ssl_module
+    ngx_http_proxy_module
+    ngx_http_fastcgi_module
+    ngx_http_uwsgi_module
+    ngx_http_scgi_module
+    ngx_http_perl_module
+    ngx_http_memcached_module
+    ngx_http_empty_gif_module
+    ngx_http_browser_module
+    ngx_http_secure_link_module
+    ngx_http_degradation_module
+    ngx_http_flv_module
+    ngx_http_mp4_module
+    ngx_http_upstream_ip_hash_module
+    ngx_http_upstream_least_conn_module
+    ngx_http_upstream_keepalive_module
+    ngx_http_stub_status_module
+    ngx_http_write_filter_module
+    ngx_http_header_filter_module
+    ngx_http_chunked_filter_module
+    ngx_http_range_header_filter_module
+    ngx_http_gzip_filter_module
+    ngx_http_postpone_filter_module
+    ngx_http_ssi_filter_module
+    ngx_http_charset_filter_module
+    ngx_http_xslt_filter_module
+    ngx_http_image_filter_module
+    ngx_http_sub_filter_module
+    ngx_http_addition_filter_module
+    ngx_http_userid_filter_module
+    ngx_http_headers_filter_module
+    ngx_http_copy_filter_module
+    ngx_http_range_body_filter_module
+    ngx_http_not_modified_filter_module
+    ngx_mail_module
+    ngx_mail_core_module
+    ngx_mail_ssl_module
+    ngx_mail_pop3_module
+    ngx_mail_imap_module
+    ngx_mail_smtp_module
+    ngx_mail_auth_http_module
+    ngx_mail_proxy_module
+    ngx_google_perftools_module"
+
+# dso shared
+NGX_SHARED_MODULES=
+NGX_SHARED_SRCS=
+NGX_SHARED_LIBS=
+NGX_SHARED_PATH=
+NGX_DSO_ALL_TARGETS=
+
+
 HTTP=YES
 
 NGX_HTTP_LOG_PATH=
@@ -102,6 +192,36 @@
 # STUB
 HTTP_STUB_STATUS=NO
 
+#shared module
+HTTP_XSLT_SHARED=NO
+HTTP_IMAGE_FILTER_SHARED=NO
+HTTP_SUB_SHARED=NO
+HTTP_ADDITION_SHARED=NO
+HTTP_RANDOM_INDEX_SHARED=NO
+HTTP_GEOIP_SHARED=NO
+HTTP_SECURE_LINK_SHARED=NO
+HTTP_FLV_SHARED=NO
+HTTP_MP4_SHARED=NO
+HTTP_CHARSET_SHARED=NO
+HTTP_USERID_SHARED=NO
+HTTP_ACCESS_SHARED=NO
+HTTP_AUTOINDEX_SHARED=NO
+HTTP_STATUS_SHARED=NO
+HTTP_MAP_SHARED=NO
+HTTP_SPLIT_CLIENTS_SHARED=NO
+HTTP_REFERER_SHARED=NO
+HTTP_REWRITE_SHARED=NO
+HTTP_FASTCGI_SHARED=NO
+HTTP_UWSGI_SHARED=NO
+HTTP_SCGI_SHARED=NO
+HTTP_MEMCACHED_SHARED=NO
+HTTP_LIMIT_CONN_SHARED=NO
+HTTP_LIMIT_REQ_SHARED=NO
+HTTP_EMPTY_GIF_SHARED=NO
+HTTP_BROWSER_SHARED=NO
+HTTP_UPSTREAM_IP_HASH_SHARED=NO
+HTTP_UPSTREAM_LEAST_CONN_SHARED=YES
+
 MAIL=NO
 MAIL_SSL=NO
 MAIL_POP3=YES
@@ -137,6 +257,7 @@
 USE_PERL=NO
 NGX_PERL=perl
 
+
 USE_LIBXSLT=NO
 USE_LIBGD=NO
 
@@ -161,59 +282,129 @@
     esac
 
     case "$option" in
-        --help)                          help=yes                   ;;
+        --help)                                    help=yes                   ;;
 
-        --prefix=)                       NGX_PREFIX="!"             ;;
-        --prefix=*)                      NGX_PREFIX="$value"        ;;
-        --sbin-path=*)                   NGX_SBIN_PATH="$value"     ;;
-        --conf-path=*)                   NGX_CONF_PATH="$value"     ;;
-        --error-log-path=*)              NGX_ERROR_LOG_PATH="$value";;
-        --pid-path=*)                    NGX_PID_PATH="$value"      ;;
-        --lock-path=*)                   NGX_LOCK_PATH="$value"     ;;
-        --user=*)                        NGX_USER="$value"          ;;
-        --group=*)                       NGX_GROUP="$value"         ;;
-
-        --crossbuild=*)                  NGX_PLATFORM="$value"      ;;
-
-        --builddir=*)                    NGX_OBJS="$value"          ;;
-
-        --with-rtsig_module)             EVENT_RTSIG=YES            ;;
-        --with-select_module)            EVENT_SELECT=YES           ;;
-        --without-select_module)         EVENT_SELECT=NONE          ;;
-        --with-poll_module)              EVENT_POLL=YES             ;;
-        --without-poll_module)           EVENT_POLL=NONE            ;;
-        --with-aio_module)               EVENT_AIO=YES              ;;
-
-        #--with-threads=*)                USE_THREADS="$value"       ;;
-        #--with-threads)                  USE_THREADS="pthreads"     ;;
-
-        --with-file-aio)                 NGX_FILE_AIO=YES           ;;
-        --with-ipv6)                     NGX_IPV6=YES               ;;
-
-        --without-http)                  HTTP=NO                    ;;
-        --without-http-cache)            HTTP_CACHE=NO              ;;
-
-        --http-log-path=*)               NGX_HTTP_LOG_PATH="$value" ;;
-        --http-client-body-temp-path=*)  NGX_HTTP_CLIENT_TEMP_PATH="$value" ;;
-        --http-proxy-temp-path=*)        NGX_HTTP_PROXY_TEMP_PATH="$value" ;;
-        --http-fastcgi-temp-path=*)      NGX_HTTP_FASTCGI_TEMP_PATH="$value" ;;
-        --http-uwsgi-temp-path=*)        NGX_HTTP_UWSGI_TEMP_PATH="$value" ;;
-        --http-scgi-temp-path=*)         NGX_HTTP_SCGI_TEMP_PATH="$value" ;;
-
-        --with-http_ssl_module)          HTTP_SSL=YES               ;;
-        --with-http_realip_module)       HTTP_REALIP=YES            ;;
-        --with-http_addition_module)     HTTP_ADDITION=YES          ;;
-        --with-http_xslt_module)         HTTP_XSLT=YES              ;;
-        --with-http_image_filter_module) HTTP_IMAGE_FILTER=YES      ;;
-        --with-http_geoip_module)        HTTP_GEOIP=YES             ;;
-        --with-http_sub_module)          HTTP_SUB=YES               ;;
-        --with-http_dav_module)          HTTP_DAV=YES               ;;
-        --with-http_flv_module)          HTTP_FLV=YES               ;;
-        --with-http_mp4_module)          HTTP_MP4=YES               ;;
-        --with-http_gzip_static_module)  HTTP_GZIP_STATIC=YES       ;;
-        --with-http_random_index_module) HTTP_RANDOM_INDEX=YES      ;;
-        --with-http_secure_link_module)  HTTP_SECURE_LINK=YES       ;;
-        --with-http_degradation_module)  HTTP_DEGRADATION=YES       ;;
+        --prefix=)                                 NGX_PREFIX="!"             ;;
+        --prefix=*)                                NGX_PREFIX="$value"        ;;
+        --sbin-path=*)                             NGX_SBIN_PATH="$value"     ;;
+        --conf-path=*)                             NGX_CONF_PATH="$value"     ;;
+        --error-log-path=*)                        NGX_ERROR_LOG_PATH="$value";;
+        --pid-path=*)                              NGX_PID_PATH="$value"      ;;
+        --lock-path=*)                             NGX_LOCK_PATH="$value"     ;;
+        --user=*)                                  NGX_USER="$value"          ;;
+        --group=*)                                 NGX_GROUP="$value"         ;;
+
+        --dso-path=*)                              NGX_DSO_PATH="$value"      ;;
+
+        --crossbuild=*)                            NGX_PLATFORM="$value"      ;;
+
+        --builddir=*)                              NGX_OBJS="$value"          ;;
+
+        --with-rtsig_module)                       EVENT_RTSIG=YES            ;;
+        --with-select_module)                      EVENT_SELECT=YES           ;;
+        --without-select_module)                   EVENT_SELECT=NONE          ;;
+        --with-poll_module)                        EVENT_POLL=YES             ;;
+        --without-poll_module)                     EVENT_POLL=NONE            ;;
+        --with-aio_module)                         EVENT_AIO=YES              ;;
+
+        #--with-threads=*)                          USE_THREADS="$value"       ;;
+        #--with-threads)                            USE_THREADS="pthreads"     ;;
+
+        --with-file-aio)                           NGX_FILE_AIO=YES           ;;
+        --with-ipv6)                               NGX_IPV6=YES               ;;
+
+        --without-dso)                             NGX_DSO=NO                 ;;
+
+        --without-http)                            HTTP=NO                    ;;
+        --without-http-cache)                      HTTP_CACHE=NO              ;;
+
+        --http-log-path=*)                         NGX_HTTP_LOG_PATH="$value" ;;
+        --http-client-body-temp-path=*)            NGX_HTTP_CLIENT_TEMP_PATH="$value" ;;
+        --http-proxy-temp-path=*)                  NGX_HTTP_PROXY_TEMP_PATH="$value" ;;
+        --http-fastcgi-temp-path=*)                NGX_HTTP_FASTCGI_TEMP_PATH="$value" ;;
+        --http-uwsgi-temp-path=*)                  NGX_HTTP_UWSGI_TEMP_PATH="$value" ;;
+        --http-scgi-temp-path=*)                   NGX_HTTP_SCGI_TEMP_PATH="$value" ;;
+
+        --with-http_ssl_module)                    HTTP_SSL=YES                      ;;
+        --with-http_realip_module)                 HTTP_REALIP=YES                   ;;
+        --with-http_addition_module)               HTTP_ADDITION=YES
+                                                   HTTP_ADDITION_SHARED=NO           ;;
+        --with-http_xslt_module)                   HTTP_XSLT=YES
+                                                   HTTP_XSLT_SHARED=NO               ;;
+        --with-http_image_filter_module)           HTTP_IMAGE_FILTER=YES
+                                                   HTTP_IMAGE_FILTER_SHARED=NO       ;;
+        --with-http_geoip_module)                  HTTP_GEOIP=YES
+                                                   HTTP_GEOIP_SHARED=NO              ;;
+        --with-http_sub_module)                    HTTP_SUB=YES
+                                                   HTTP_SUB_SHARED=NO                ;;
+        --with-http_dav_module)                    HTTP_DAV=YES                      ;;
+        --with-http_flv_module)                    HTTP_FLV=YES
+                                                   HTTP_FLV_SHARED=NO                ;;
+        --with-http_mp4_module)                    HTTP_MP4=YES
+                                                   HTTP_MP4_SHARED=NO                ;;
+        --with-http_gzip_static_module)            HTTP_GZIP_STATIC=YES              ;;
+        --with-http_random_index_module)           HTTP_RANDOM_INDEX=YES
+                                                   HTTP_RANDOM_INDEX_SHARED=NO       ;;
+        --with-http_secure_link_module)            HTTP_SECURE_LINK=YES
+                                                   HTTP_SECURE_LINK_SHARED=NO        ;;
+        --with-http_degradation_module)            HTTP_DEGRADATION=YES              ;;
+
+        --with-http_addition_module=shared)        HTTP_ADDITION_SHARED=YES
+                                                   HTTP_ADDITION=NO                  ;;
+        --with-http_xslt_module=shared)            HTTP_XSLT_SHARED=YES
+                                                   HTTP_XSL=NO                       ;;
+        --with-http_image_filter_module=shared)    HTTP_IMAGE_FILTER_SHARED=YES
+                                                   HTTP_IMAGE_FILTER=NO              ;;
+        --with-http_geoip_module=shared)           HTTP_GEOIP_SHARED=YES
+                                                   HTTP_GEOIP=NO                     ;;
+        --with-http_sub_module=shared)             HTTP_SUB_SHARED=YES
+                                                   HTTP_SUB=NO                       ;;
+        --with-http_flv_module=shared)             HTTP_FLV_SHARED=YES
+                                                   HTTP_FLV=NO                       ;;
+        --with-http_mp4_module=shared)             HTTP_MP4_SHARED=YES
+                                                   HTTP_MP4=NO                       ;;
+        --with-http_random_index_module=shared)    HTTP_RANDOM_INDEX_SHARED=YES
+                                                   HTTP_RANDOM_INDEX=NO              ;;
+        --with-http_secure_link_module=shared)     HTTP_SECURE_LINK_SHARED=YES
+                                                   HTTP_SECURE_LINK=NO               ;;
+        --with-http_charset_filter_module=shared)  HTTP_CHARSET_SHARED=YES
+                                                   HTTP_CHARSET=NO                   ;;
+        --with-http_userid_filter_module=shared)   HTTP_USERID_SHARED=YES
+                                                   HTTP_USERID=NO                    ;;
+        --with-http_access_module=shared)          HTTP_ACCESS_SHARED=YES
+                                                   HTTP_ACCESS=NO                    ;;
+        --with-http_autoindex_module=shared)       HTTP_AUTOINDEX_SHARED=YES
+                                                   HTTP_AUTOINDEX=NO                 ;;
+        --with-http_map_module=shared)             HTTP_MAP_SHARED=YES
+                                                   HTTP_MAP=NO                       ;;
+        --with-http_split_clients_module=shared)   HTTP_SPLIT_CLIENTS_SHARED=YES
+                                                   HTTP_SPLIT_CLIENTS=NO             ;;
+        --with-http_referer_module=shared)         HTTP_REFERER_SHARED=YES
+                                                   HTTP_REFERER=NO                   ;;
+        --with-http_rewrite_module=shared)         HTTP_REWRITE_SHARED=YES
+                                                   HTTP_REWRITE=NO                   ;;
+        --with-http_fastcgi_module=shared)         HTTP_FASTCGI_SHARED=YES
+                                                   HTTP_FASTCGI=NO                   ;;
+        --with-http_uwsgi_module=shared)           HTTP_UWSGI_SHARED=YES
+                                                   HTTP_UWSGI=NO                     ;;
+        --with-http_scgi_module=shared)            HTTP_SCGI_SHARED=YES
+                                                   HTTP_SCGI=NO                      ;;
+        --with-http_memcached_module=shared)       HTTP_MEMCACHED_SHARED=YES
+                                                   HTTP_MEMCACHED=NO                 ;;
+        --with-http_limit_conn_module=shared)      HTTP_LIMIT_CONN_SHARED=YES
+                                                   HTTP_LIMIT_CONN=NO                ;;
+        --with-http_limit_req_module=shared)       HTTP_LIMIT_REQ_SHARED=YES
+                                                   HTTP_LIMIT_REQ=NO                 ;;
+        --with-http_empty_gif_module=shared)       HTTP_EMPTY_GIF_SHARED=YES
+                                                   HTTP_EMPTY_GIF=NO                 ;;
+        --with-http_browser_module=shared)         HTTP_BROWSER_SHARED=YES
+                                                   HTTP_BROWSER=NO                   ;;
+        --with-http_upstream_ip_hash_module=shared)
+                                                   HTTP_UPSTREAM_IP_HASH_SHARED=YES
+                                                   HTTP_UPSTREAM_IP_HASH=NO          ;;
+        --with-http_upstream_least_conn_module=shared)
+                                                   HTTP_UPSTREAM_LEAST_CONN_SHARED=YES
+                                                   HTTP_UPSTREAM_LEAST_CONN=NO       ;;
 
         --without-http_charset_module)   HTTP_CHARSET=NO            ;;
         --without-http_gzip_module)      HTTP_GZIP=NO               ;;
@@ -253,7 +444,7 @@
         --with-perl=*)                   NGX_PERL="$value"          ;;
 
         # STUB
-        --with-http_stub_status_module)  HTTP_STUB_STATUS=YES       ;;
+        --with-http_stub_status_module)         HTTP_STUB_STATUS=YES          ;;
 
         --with-mail)                     MAIL=YES                   ;;
         --with-mail_ssl_module)          MAIL_SSL=YES               ;;
@@ -337,6 +528,8 @@
 
   --builddir=DIR                     set build directory
 
+  --dso-path=*)                      set dso default load path
+
   --with-rtsig_module                enable rtsig module
   --with-select_module               enable select module
   --without-select_module            disable select module
@@ -346,13 +539,15 @@
   --with-file-aio                    enable file AIO support
   --with-ipv6                        enable IPv6 support
 
+  --without-dso                      disable dso module load
+
   --with-http_ssl_module             enable ngx_http_ssl_module
   --with-http_realip_module          enable ngx_http_realip_module
-  --with-http_addition_module        enable ngx_http_addition_module
-  --with-http_xslt_module            enable ngx_http_xslt_module
+  --with-http_addition_module        enable ngx_http_addition_filter_module
+  --with-http_xslt_module            enable ngx_http_xslt_filter_module
   --with-http_image_filter_module    enable ngx_http_image_filter_module
   --with-http_geoip_module           enable ngx_http_geoip_module
-  --with-http_sub_module             enable ngx_http_sub_module
+  --with-http_sub_module             enable ngx_http_sub_filter_module
   --with-http_dav_module             enable ngx_http_dav_module
   --with-http_flv_module             enable ngx_http_flv_module
   --with-http_mp4_module             enable ngx_http_mp4_module
@@ -362,16 +557,58 @@
   --with-http_degradation_module     enable ngx_http_degradation_module
   --with-http_stub_status_module     enable ngx_http_stub_status_module
 
-  --without-http_charset_module      disable ngx_http_charset_module
-  --without-http_gzip_module         disable ngx_http_gzip_module
+  --with-http_addition_module=shared enable ngx_http_addition_filter_module(shared)
+  --with-http_xslt_module=shared     enable ngx_http_xslt_filter_module(shared)
+  --with-http_image_filter_module=shared
+                                     enable ngx_http_image_filter_module(shared)
+  --with-http_geoip_module=shared    enable ngx_http_geoip_module
+  --with-http_sub_module=shared      enable ngx_http_sub_filter_module(shared)
+  --with-http_flv_module=shared      enable ngx_http_flv_module(shared)
+  --with-http_mp4_module=shared      enable ngx_http_mp4_module(shared)
+  --with-http_random_index_module=shared
+                                     enable ngx_http_random_index_module(shared)
+  --with-http_secure_link_module=shared
+                                     enable ngx_http_secure_link_module(shared)
+  --with-http_charset_filter_module=shared
+                                     enable ngx_http_charset_filter_module(shared)
+  --with-http_userid_filter_module=shared
+                                     enable ngx_http_userid_filter_module(shared)
+  --with-http_access_module=shared   enable ngx_http_access_module(shared)
+  --with-http_autoindex_module=shared
+                                     enable ngx_http_autoindex_module(shared)
+  --with-http_map_module=shared      enable ngx_http_map_module(shared)
+  --with-http_split_clients_module=shared
+                                     enable ngx_http_split_clients_module(shared)
+  --with-http_referer_module=shared  enable ngx_http_referer_module(shared)
+  --with-http_rewrite_module=shared  enable ngx_http_rewrite_module(shared)
+  --with-http_fastcgi_module=shared  enable ngx_http_fastcgi_module(shared)
+  --with-http_uwsgi_module=shared    enable ngx_http_uwsgi_module(shared)
+  --with-http_scgi_module=shared     enable ngx_http_scgi_module(shared)
+  --with-http_memcached_module=shared
+                                     enable ngx_http_memcached_module(shared)
+  --with-http_limit_conn_module=shared
+                                     enable ngx_http_limit_conn_module(shared)
+  --with-http_limit_req_module=shared
+                                     enable ngx_http_limit_req_module(shared)
+  --with-http_empty_gif_module=shared
+                                     enable ngx_http_empty_gif_module(shared)
+  --with-http_browser_module=shared  enable ngx_http_browser_module(shared)
+  --with-http_upstream_ip_hash_module=shared
+                                     enable ngx_http_upstream_ip_hash_module(shared)
+  --with-http_upstream_least_conn_module=shared
+                                     enable ngx_http_upstream_least_conn_module(shared)
+
+  --without-http_charset_module      disable ngx_http_charset_filter_module
+  --without-http_gzip_module         disable ngx_http_gzip_filter_module
   --without-http_ssi_module          disable ngx_http_ssi_module
-  --without-http_userid_module       disable ngx_http_userid_module
+  --without-http_userid_module       disable ngx_http_userid_filter_module
   --without-http_access_module       disable ngx_http_access_module
   --without-http_auth_basic_module   disable ngx_http_auth_basic_module
   --without-http_autoindex_module    disable ngx_http_autoindex_module
   --without-http_geo_module          disable ngx_http_geo_module
   --without-http_map_module          disable ngx_http_map_module
-  --without-http_split_clients_module disable ngx_http_split_clients_module
+  --without-http_split_clients_module
+                                     disable ngx_http_split_clients_module
   --without-http_referer_module      disable ngx_http_referer_module
   --without-http_rewrite_module      disable ngx_http_rewrite_module
   --without-http_proxy_module        disable ngx_http_proxy_module
@@ -487,6 +724,10 @@
     NGX_ERROR_LOG_PATH=${NGX_ERROR_LOG_PATH:-logs/error.log}
 fi
 
+
+NGX_DSO_PATH=${NGX_MODULE_PATH:-modules}
+
+
 NGX_HTTP_LOG_PATH=${NGX_HTTP_LOG_PATH:-logs/access.log}
 NGX_HTTP_CLIENT_TEMP_PATH=${NGX_HTTP_CLIENT_TEMP_PATH:-client_body_temp}
 NGX_HTTP_PROXY_TEMP_PATH=${NGX_HTTP_PROXY_TEMP_PATH:-proxy_temp}
diff -ruN nginx-1.3.4/auto/sources nginx-1.3.4-dso/auto/sources
--- nginx-1.3.4/auto/sources	2012-06-04 07:21:26.000000000 +0800
+++ nginx-1.3.4-dso/auto/sources	2012-08-06 12:15:14.345801159 +0800
@@ -80,6 +80,12 @@
 OPENSSL_SRCS=src/event/ngx_event_openssl.c
 
 
+DSO_MODULE=ngx_dso_module
+DSO_SRCS="src/core/ngx_dso_module.c"
+DSO_LIBS=
+DSO_INCS=
+
+
 EVENT_MODULES="ngx_events_module ngx_event_core_module"
 
 EVENT_INCS="src/event src/event/modules"
diff -ruN nginx-1.3.4/auto/summary nginx-1.3.4-dso/auto/summary
--- nginx-1.3.4/auto/summary	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/auto/summary	2012-08-06 12:15:26.749886535 +0800
@@ -97,6 +97,10 @@
   nginx http client request body temporary files: "$NGX_HTTP_CLIENT_TEMP_PATH"
 END
 
+if [ $NGX_DSO = YES ]; then
+    echo "  nginx dso module path: \"$NGX_DSO_PATH\""
+fi
+
 if [ $HTTP_PROXY = YES ]; then
     echo "  nginx http proxy temporary files: \"$NGX_HTTP_PROXY_TEMP_PATH\""
 fi
diff -ruN nginx-1.3.4/auto/unix nginx-1.3.4-dso/auto/unix
--- nginx-1.3.4/auto/unix	2012-06-08 17:41:55.000000000 +0800
+++ nginx-1.3.4-dso/auto/unix	2012-08-06 12:15:42.849994792 +0800
@@ -272,6 +272,13 @@
 
     if [ $ngx_found = yes ]; then
         NGX_LIBDL="-ldl"
+    else
+	if [ $NGX_DSO = YES] ; then
+            cat << END
+dlopen(3) required by dso not found, please disable dso (--without-dso).
+
+END
+	fi
     fi
 fi
 
diff -ruN nginx-1.3.4/src/core/nginx.c nginx-1.3.4-dso/src/core/nginx.c
--- nginx-1.3.4/src/core/nginx.c	2012-04-13 03:35:41.000000000 +0800
+++ nginx-1.3.4-dso/src/core/nginx.c	2012-08-06 12:16:07.586156214 +0800
@@ -228,6 +228,7 @@
                 "  -V            : show version and configure options then exit"
                                    NGX_LINEFEED
                 "  -t            : test configuration and exit" NGX_LINEFEED
+                "  -m            : show all modules and exit" NGX_LINEFEED
                 "  -q            : suppress non-error messages "
                                    "during configuration testing" NGX_LINEFEED
                 "  -s signal     : send signal to a master process: "
@@ -260,7 +261,7 @@
                 "configure arguments:" NGX_CONFIGURE NGX_LINEFEED);
         }
 
-        if (!ngx_test_config) {
+        if (!ngx_test_config && !ngx_show_modules) {
             return 0;
         }
     }
@@ -347,6 +348,10 @@
         return 0;
     }
 
+    if (ngx_show_modules) {
+        return 0;
+    }
+
     if (ngx_signal) {
         return ngx_signal_process(cycle, ngx_signal);
     }
@@ -699,6 +704,11 @@
                 ngx_test_config = 1;
                 break;
 
+            case 'm':
+                ngx_show_version = 1;
+                ngx_show_modules = 1;
+                break;
+
             case 'q':
                 ngx_quiet_mode = 1;
                 break;
diff -ruN nginx-1.3.4/src/core/ngx_conf_file.h nginx-1.3.4-dso/src/core/ngx_conf_file.h
--- nginx-1.3.4/src/core/ngx_conf_file.h	2012-07-30 03:59:06.000000000 +0800
+++ nginx-1.3.4-dso/src/core/ngx_conf_file.h	2012-08-06 12:17:32.894679656 +0800
@@ -45,7 +45,7 @@
 #define NGX_CONF_ANY         0x00000400
 #define NGX_CONF_1MORE       0x00000800
 #define NGX_CONF_2MORE       0x00001000
-#define NGX_CONF_MULTI       0x00000000  /* compatibility */
+#define NGX_CONF_MULTI       0x00000000  /* compatibility */    
 
 #define NGX_DIRECT_CONF      0x00010000
 
@@ -53,7 +53,6 @@
 #define NGX_ANY_CONF         0x0F000000
 
 
-
 #define NGX_CONF_UNSET       -1
 #define NGX_CONF_UNSET_UINT  (ngx_uint_t) -1
 #define NGX_CONF_UNSET_PTR   (void *) -1
@@ -105,7 +104,10 @@
 };
 
 
-#define NGX_MODULE_V1          0, 0, 0, 0, 0, 0, 1
+#define NGX_NUMBER_MAJOR  1
+#define NGX_NUMBER_MINOR  1
+
+#define NGX_MODULE_V1          0, 0, 0, 0, 0, NGX_NUMBER_MAJOR, NGX_NUMBER_MINOR
 #define NGX_MODULE_V1_PADDING  0, 0, 0, 0, 0, 0, 0, 0
 
 struct ngx_module_s {
@@ -115,9 +117,9 @@
     ngx_uint_t            spare0;
     ngx_uint_t            spare1;
     ngx_uint_t            spare2;
-    ngx_uint_t            spare3;
 
-    ngx_uint_t            version;
+    ngx_uint_t            major_version;
+    ngx_uint_t            minor_version;
 
     void                 *ctx;
     ngx_command_t        *commands;
@@ -343,6 +345,8 @@
 
 extern ngx_uint_t     ngx_max_module;
 extern ngx_module_t  *ngx_modules[];
+extern const char    *ngx_module_names[];
+extern const char    *ngx_all_module_names[];
 
 
 #endif /* _NGX_HTTP_CONF_FILE_H_INCLUDED_ */
diff -ruN nginx-1.3.4/src/core/ngx_cycle.c nginx-1.3.4-dso/src/core/ngx_cycle.c
--- nginx-1.3.4/src/core/ngx_cycle.c	2012-01-18 23:07:43.000000000 +0800
+++ nginx-1.3.4-dso/src/core/ngx_cycle.c	2012-08-06 12:18:03.369857971 +0800
@@ -10,6 +10,10 @@
 #include <ngx_event.h>
 
 
+#if (NGX_DSO)
+void ngx_show_dso_modules(ngx_conf_t *cf);
+#endif
+
 static void ngx_destroy_cycle_pools(ngx_conf_t *conf);
 static ngx_int_t ngx_cmp_sockaddr(struct sockaddr *sa1, struct sockaddr *sa2);
 static ngx_int_t ngx_init_zone_pool(ngx_cycle_t *cycle,
@@ -26,6 +30,7 @@
 
 ngx_uint_t             ngx_test_config;
 ngx_uint_t             ngx_quiet_mode;
+ngx_uint_t             ngx_show_modules;
 
 #if (NGX_THREADS)
 ngx_tls_key_t          ngx_core_tls_key;
@@ -271,6 +276,20 @@
         return NULL;
     }
 
+    if (ngx_show_modules) {
+        ngx_log_stderr(0, "loaded modules:");
+
+        for (i = 0; ngx_module_names[i]; i++) {
+            ngx_log_stderr(0, "    %s (static)", ngx_module_names[i]);
+        }
+
+#if (NGX_DSO)
+        ngx_show_dso_modules(&conf);
+#endif
+        ngx_destroy_cycle_pools(&conf);
+        return cycle;
+    }
+
     if (ngx_test_config && !ngx_quiet_mode) {
         ngx_log_stderr(0, "the configuration file %s syntax is ok",
                        cycle->conf_file.data);
diff -ruN nginx-1.3.4/src/core/ngx_cycle.h nginx-1.3.4-dso/src/core/ngx_cycle.h
--- nginx-1.3.4/src/core/ngx_cycle.h	2012-03-21 21:58:51.000000000 +0800
+++ nginx-1.3.4-dso/src/core/ngx_cycle.h	2012-08-06 12:18:13.440916186 +0800
@@ -133,6 +133,7 @@
 extern ngx_array_t            ngx_old_cycles;
 extern ngx_module_t           ngx_core_module;
 extern ngx_uint_t             ngx_test_config;
+extern ngx_uint_t             ngx_show_modules;
 extern ngx_uint_t             ngx_quiet_mode;
 #if (NGX_THREADS)
 extern ngx_tls_key_t          ngx_core_tls_key;
diff -ruN nginx-1.3.4/src/core/ngx_dso_module.c nginx-1.3.4-dso/src/core/ngx_dso_module.c
--- nginx-1.3.4/src/core/ngx_dso_module.c	1970-01-01 08:00:00.000000000 +0800
+++ nginx-1.3.4-dso/src/core/ngx_dso_module.c	2012-08-09 16:35:10.532898508 +0800
@@ -0,0 +1,694 @@
+
+/*
+ * Copyright (C) 2010-2012 Alibaba Group Holding Limited
+ */
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+#include <nginx.h>
+#include <dlfcn.h>
+
+
+typedef struct {
+    ngx_str_t     type;
+    ngx_str_t     entry;
+} ngx_dso_flagpole_t;
+
+
+typedef struct {
+    ngx_str_t     name;
+    ngx_str_t     path;
+    void         *dl_handle;
+    ngx_module_t *module;
+} ngx_dso_module_t;
+
+
+typedef struct {
+    ngx_str_t     path;
+    ngx_int_t     flag_postion;
+
+    ngx_array_t  *order;
+    ngx_array_t  *modules;
+} ngx_dso_conf_ctx_t;
+
+
+static char *ngx_dso_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+static char *ngx_dso_load(ngx_conf_t *cf);
+static ngx_int_t ngx_dso_check_duplicated(ngx_cycle_t *cycle, ngx_array_t *modules,
+    ngx_str_t *name, ngx_str_t *path);
+static char *ngx_dso_order(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+
+static ngx_int_t ngx_dso_get_position(ngx_str_t *module_entry);
+
+static ngx_int_t ngx_dso_find_postion(ngx_dso_conf_ctx_t *ctx,
+    ngx_str_t module_name);
+
+
+static ngx_command_t  ngx_dso_module_commands[] = {
+
+    { ngx_string("dso"),
+      NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,
+      ngx_dso_block,
+      0,
+      0,
+      NULL },
+
+    ngx_null_command
+};
+
+
+static ngx_core_module_t  ngx_dso_module_ctx = {
+    ngx_string("dso"),
+    NULL,
+    NULL,
+};
+
+
+ngx_module_t  ngx_dso_module = {
+    NGX_MODULE_V1,
+    &ngx_dso_module_ctx,                   /* module context */
+    ngx_dso_module_commands,               /* module directives */
+    NGX_CORE_MODULE,                       /* module type */
+    NULL,                                  /* init master */
+    NULL,                                  /* init module */
+    NULL,                                  /* init process */
+    NULL,                                  /* init thread */
+    NULL,                                  /* exit thread */
+    NULL,                                  /* exit process */
+    NULL,                                  /* exit master */
+    NGX_MODULE_V1_PADDING
+};
+
+
+static ngx_module_t *ngx_old_modules[NGX_DSO_MAX];
+static ngx_module_t *ngx_static_modules[NGX_DSO_MAX];
+static ngx_str_t ngx_default_modules_prefix = ngx_string(NGX_DSO_PATH);
+
+
+static ngx_dso_flagpole_t module_flagpole[] = {
+
+    { ngx_string("filter"), ngx_string("ngx_http_copy_filter_module")},
+    { ngx_null_string, ngx_null_string}
+};
+
+
+static ngx_int_t
+ngx_dso_get_position(ngx_str_t *entry)
+{
+    size_t                    len;
+    ngx_int_t                 i;
+
+    /* start insert filter list */
+    for (i = 0; ngx_module_names[i]; i++) {
+
+        len = ngx_strlen(ngx_module_names[i]);
+
+        if (len == entry->len
+            && ngx_strncasecmp((u_char *) ngx_module_names[i],
+                entry->data, len) == 0)
+        {
+            return i;
+        }
+    }
+
+    return NGX_ERROR;
+}
+
+
+static void
+ngx_dso_cleanup(void *data)
+{
+    ngx_cycle_t       *cycle = data;
+
+    ngx_uint_t                           i;
+    ngx_dso_module_t                    *dl_m;
+    ngx_dso_conf_ctx_t                  *ctx;
+
+    if (cycle != ngx_cycle) {
+
+        if (cycle->conf_ctx) {
+            ctx = (ngx_dso_conf_ctx_t *)
+                   cycle->conf_ctx[ngx_dso_module.index];
+
+            if (ctx != NULL) {
+                dl_m = ctx->modules->elts;
+
+                for (i = 0; i < ctx->modules->nelts; i++) {
+                    if (dl_m[i].name.len == 0) {
+                        continue;
+                    }
+
+                    dlclose(dl_m[i].dl_handle);
+                }
+            }
+        }
+
+        ngx_memzero(ngx_modules, sizeof(ngx_module_t *) * NGX_DSO_MAX);
+        ngx_memcpy(ngx_modules, ngx_old_modules,
+                   sizeof(ngx_module_t *) * NGX_DSO_MAX);
+    }
+}
+
+
+static ngx_int_t
+ngx_dso_check_duplicated(ngx_cycle_t *cycle, ngx_array_t *modules,
+    ngx_str_t *name, ngx_str_t *path)
+{
+    size_t                               len;
+    ngx_uint_t                           j;
+    ngx_dso_module_t                    *m;
+
+    for (j = 0; ngx_module_names[j]; j++) {
+        len = ngx_strlen(ngx_module_names[j]);
+
+        if (len == name->len && ngx_strncmp(ngx_module_names[j],
+                name->data, name->len) == 0)
+        {
+            ngx_log_stderr(0, "module %V is already static loaded, skipping",
+                name);
+            return NGX_DECLINED;
+        }
+    }
+
+    m = modules->elts;
+    for (j = 0; j < modules->nelts; j++) {
+        if ((m[j].name.len == name->len
+            && ngx_strncmp(m[j].name.data, name->data, name->len) == 0)
+           || (m[j].path.len == path->len
+              && ngx_strncmp(m[j].path.data, path->data, path->len) == 0))
+        {
+            ngx_log_stderr(0, "module %V/%V is already dynamic loaded, skipping",
+                path, name);
+            m[j].name.len = 0;
+            return NGX_DECLINED;
+        }
+    }
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
+ngx_dso_full_name(ngx_cycle_t *cycle, ngx_dso_conf_ctx_t *ctx, ngx_str_t *name)
+{
+    size_t      len, size;
+    u_char     *p, *n, *prefix;
+
+    if (name->data[0] == '/') {
+        return NGX_OK;
+    }
+
+    if (ctx->path.data == NULL) {
+        if (ngx_default_modules_prefix.data[0] != '/') {
+            prefix = cycle->prefix.data;
+            len = cycle->prefix.len;
+            size = len + ngx_default_modules_prefix.len + name->len + 1;
+        } else {
+            prefix = ngx_default_modules_prefix.data;
+            len = ngx_default_modules_prefix.len;
+            size = len + name->len + 1;
+        }
+    } else {
+        if (ctx->path.data[0] != '/') {
+            ngx_log_stderr(0, "the path(%V) of dso module should be absolute path",
+                           &ctx->path);
+            return NGX_ERROR;
+        }
+
+        len = ctx->path.len;
+        prefix = ctx->path.data;
+        size = len + name->len + 1;
+    }
+
+    n = ngx_pnalloc(cycle->pool, size + 1);
+    if (n == NULL) {
+        return NGX_ERROR;
+    }
+
+    p = ngx_cpymem(n, prefix, len);
+
+    if (ctx->path.data == NULL
+       && ngx_default_modules_prefix.data[0] != '/')
+    {
+        p = ngx_cpymem(p, ngx_default_modules_prefix.data,
+                       ngx_default_modules_prefix.len);
+    }
+
+    p = ngx_cpymem(p, "/", 1);
+    ngx_cpystrn(p, name->data, name->len + 1);
+
+    name->len = size;
+    name->data = n;
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
+ngx_dso_open(ngx_dso_module_t *dl_m)
+{
+    void                                *dl_handle;
+    ngx_str_t                            module_name, module_path;
+    ngx_module_t                        *module;
+
+    module_name = dl_m->name;
+    module_path = dl_m->path;
+
+    dl_handle = dlopen((char *) module_path.data, RTLD_NOW | RTLD_GLOBAL);
+    if (dl_handle == NULL) {
+        ngx_log_stderr(errno, "load module failed %s", dlerror());
+        return NGX_ERROR;
+    }
+
+    module = dlsym(dl_handle, (const char *) module_name.data);
+    if (module == NULL) {
+        ngx_log_stderr(errno, "Can't locate sym in module(%V)", &module_name);
+        return NGX_ERROR;
+    }
+
+    dl_m->dl_handle = dl_handle;
+    dl_m->module = module;
+
+    return NGX_OK;
+}
+
+
+static char *
+ngx_dso_insert_module(ngx_module_t *module, ngx_int_t flag_postion)
+{
+    ngx_uint_t                j;
+    ngx_module_t             *m;
+
+    m = NULL;
+    /* start insert filter list */
+    for (j = flag_postion; ngx_modules[j]; j++) {
+        m = ngx_modules[j];
+
+        ngx_modules[j] = module;
+
+        module = m;
+    }
+
+    if (m == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    ngx_modules[j] = module;
+
+    return NGX_CONF_OK;
+}
+
+
+	
+static char *
+ngx_dso_save(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_int_t                            rc;
+    ngx_str_t                           *value;
+    ngx_dso_module_t                    *dl_m;
+    ngx_dso_conf_ctx_t                  *ctx;
+
+    ctx = cf->ctx;
+    value = cf->args->elts;
+
+    if (ctx->modules->nelts >= NGX_DSO_MAX) {
+        ngx_log_stderr(0, "Module \"%V\" could not be loaded, "
+            "because the dso module limit(%ui) was reached.",
+                      &value[1], NGX_DSO_MAX);
+        return NGX_CONF_ERROR;
+    }
+
+    rc = ngx_dso_check_duplicated(cf->cycle, ctx->modules,
+                                 &value[1], &value[2]);
+    if (rc == NGX_DECLINED) {
+        return NGX_CONF_OK;
+    }
+
+    dl_m = ngx_array_push(ctx->modules);
+    if (dl_m == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    dl_m->name = value[1];
+    dl_m->path = value[2];
+
+    return NGX_CONF_OK;
+}
+
+
+static char *
+ngx_dso_load(ngx_conf_t *cf)
+{
+    char                                *rv;
+    ngx_int_t                            postion;
+    ngx_uint_t                           i;
+    ngx_dso_module_t                    *dl_m;
+    ngx_dso_conf_ctx_t                  *ctx;
+
+    ctx = cf->ctx;
+    dl_m = ctx->modules->elts;
+
+    for (i = 0; i < ctx->modules->nelts; i++) {
+        if (ngx_dso_full_name(cf->cycle, ctx, &dl_m[i].path) != NGX_OK) {
+            return NGX_CONF_ERROR;
+        }
+
+        if (ngx_dso_open(&dl_m[i]) == NGX_ERROR) {
+            return NGX_CONF_ERROR;
+        }
+
+        if (dl_m[i].module->type == NGX_CORE_MODULE) {
+            ngx_log_stderr(0,"dso module not support core module");
+            return NGX_CONF_ERROR;
+        }
+
+        if (dl_m[i].module->major_version != NGX_NUMBER_MAJOR
+           || dl_m[i].module->minor_version > NGX_NUMBER_MINOR)
+        {
+            ngx_log_stderr(0,"Module \"%V\" is not compatible with this "
+                           "version of Tengine (found %d.%d, need %d.%d)."
+                           " Please contact the vendor for the correct version.",
+                           &dl_m[i].name, dl_m[i].module->major_version,
+                           dl_m[i].module->minor_version, NGX_NUMBER_MAJOR,
+                           NGX_NUMBER_MINOR);
+            return NGX_CONF_ERROR;
+        }
+
+        postion = ngx_dso_find_postion(ctx, dl_m[i].name);
+
+        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, "dso find postion(%i)", postion);
+
+        rv = ngx_dso_insert_module(dl_m[i].module, postion);
+        if (rv == NGX_CONF_ERROR) {
+            ngx_log_stderr(0, "dso find error postion(%i)", postion);
+            return rv;
+        }
+    }
+
+    return NGX_CONF_OK;
+}
+
+
+static char *
+ngx_dso_template(ngx_conf_t *cf, ngx_dso_conf_ctx_t *ctx,
+    ngx_str_t *name)
+{
+    char                      *rv;
+    ngx_str_t                  file;
+    ngx_conf_t                 pcf;
+
+    file.len = name->len;
+    file.data = ngx_pnalloc(cf->temp_pool, name->len + 1);
+
+    if (file.data == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    ngx_sprintf(file.data, "%V", name);
+
+    if (ngx_conf_full_name(cf->cycle, &file, 1) != NGX_OK) {
+        return NGX_CONF_ERROR;
+    }
+
+    pcf = *cf;
+    cf->ctx = ctx;
+    cf->module_type = NGX_CORE_MODULE;
+    cf->handler = ngx_dso_order;
+
+    rv = ngx_conf_parse(cf, &file);
+
+    *cf = pcf;
+
+    return rv;
+}
+
+
+static char *
+ngx_dso_parse(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
+{
+    ngx_str_t                           *value;
+    ngx_dso_conf_ctx_t                  *ctx;
+
+    value = cf->args->elts;
+    ctx = cf->ctx;
+
+    if (ngx_strcmp(value[0].data, "load") == 0) {
+
+        if (cf->args->nelts != 3) {
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                "invalid number of arguments in \"load\" directive");
+            return NGX_CONF_ERROR;
+        }
+
+        return ngx_dso_save(cf, dummy, conf);
+    }
+
+    if (ngx_strcmp(value[0].data, "path") == 0) {
+        if (cf->args->nelts != 2) {
+
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                "invalid number of arguments in \"path\" directive");
+            return NGX_CONF_ERROR;
+        }
+
+        if (ctx->path.data != NULL) {
+            return "is duplicate";
+        }
+
+        ctx->path = value[1];
+        return NGX_CONF_OK;
+    }
+
+    if (ngx_strcmp(value[0].data, "order") == 0) {
+
+        if (cf->args->nelts != 2) {
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                "invalid number of arguments in \"sequence\" directive");
+            return NGX_CONF_ERROR;
+        }
+
+        if (ctx->order->nelts != 0) {
+            return "is duplicate";
+        }
+
+        return ngx_dso_template(cf, ctx, &value[1]);
+    }
+
+    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                       "unknown directive \"%s\"", value[0].data);
+    return NGX_CONF_ERROR;
+}
+
+
+static char *
+ngx_dso_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    char                                *rv;
+    ngx_conf_t                           pcf;
+    ngx_dso_conf_ctx_t                  *ctx;
+    ngx_pool_cleanup_t                  *cln;
+
+    ctx = ((void **) cf->ctx)[ngx_dso_module.index];
+    if (ctx != NULL) {
+        return "is duplicate";
+    }
+
+    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_dso_conf_ctx_t));
+
+    if (ctx == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    *(ngx_dso_conf_ctx_t **) conf = ctx;
+
+    ctx->modules = ngx_array_create(cf->pool, 10, sizeof(ngx_dso_module_t));
+    if (ctx->modules == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    ctx->flag_postion = ngx_dso_get_position(&module_flagpole[0].entry);
+    if (ctx->flag_postion == NGX_ERROR) {
+        return NGX_CONF_ERROR;
+    }
+
+    ctx->order = ngx_array_create(cf->pool, 10, sizeof(ngx_str_t));
+    if (ctx->order == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (ngx_is_init_cycle(cf->cycle->old_cycle)) {
+        ngx_memzero(ngx_static_modules, sizeof(ngx_module_t *) * ngx_max_module);
+        ngx_memcpy(ngx_static_modules, ngx_modules,
+                   sizeof(ngx_module_t *) * ngx_max_module);
+    } else {
+        ngx_memzero(ngx_old_modules, sizeof(ngx_module_t *) * NGX_DSO_MAX);
+
+        ngx_memcpy(ngx_old_modules, ngx_modules,
+                   sizeof(ngx_module_t *) * NGX_DSO_MAX);
+        ngx_memcpy(ngx_modules, ngx_static_modules,
+                   sizeof(ngx_module_t *) * NGX_DSO_MAX);
+    }
+
+    pcf = *cf;
+    cf->ctx = ctx;
+    cf->module_type = NGX_CORE_MODULE;
+    cf->handler = ngx_dso_parse;
+    cf->handler_conf = conf;
+
+    cln = ngx_pool_cleanup_add(cf->pool, 0);
+    if (cln == NULL) {
+        *cf = pcf;
+        return NGX_CONF_ERROR;
+    }
+
+    cln->handler = ngx_dso_cleanup;
+    cln->data = cf->cycle;
+
+    rv = ngx_conf_parse(cf, NULL);
+    if (rv != NGX_CONF_OK) {
+        *cf = pcf;
+        return rv;
+    }
+
+    rv = ngx_dso_load(cf);
+
+    if (rv == NGX_CONF_ERROR) {
+        return rv;
+    }
+
+    *cf = pcf;
+
+    return NGX_CONF_OK;
+}
+
+
+static char *
+ngx_dso_order(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_str_t                                *value, *module_name;
+    ngx_dso_conf_ctx_t                       *ctx;
+
+    value = cf->args->elts;
+    ctx = cf->ctx;
+
+    if (cf->args->nelts != 1) {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                "unknown directive \"%s\"", value[0].data);
+        return NGX_CONF_ERROR;
+    }
+
+    module_name = ngx_array_push(ctx->order);
+    if (module_name == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    *module_name = value[0];
+
+    return NGX_CONF_OK;
+}
+
+
+static ngx_int_t
+ngx_dso_find_postion(ngx_dso_conf_ctx_t *ctx, ngx_str_t module_name)
+{
+    size_t                   len1, len2, len3;
+    ngx_int_t                near;
+    ngx_uint_t               i, k;
+    ngx_str_t               *name;
+
+    near = ctx->flag_postion;
+
+    if (ctx->order == NULL || ctx->order->nelts == 0) {
+
+        for (i = 1; ngx_all_module_names[i]; i++) {
+            len1 = ngx_strlen(ngx_all_module_names[i]);
+            if (len1 == module_name.len
+               && ngx_strncmp(ngx_all_module_names[i], module_name.data, len1) == 0)
+            {
+                if (near <= ctx->flag_postion) {
+                    ++ctx->flag_postion;
+                }
+
+                return near;
+            }
+
+            len2 = ngx_strlen(ngx_all_module_names[i - 1]);
+            for (k = 0; ngx_module_names[k]; k++) {
+                len3 = ngx_strlen(ngx_module_names[k]);
+
+                if (len2 == len3
+                   && ngx_strncmp(ngx_all_module_names[i - 1],
+                                  ngx_module_names[k], len2) == 0)
+                {
+                    near = k + 1;
+                    break;
+                }
+            }
+        }
+
+        if (ngx_all_module_names[i] == NULL) {
+            return ++ctx->flag_postion;
+        }
+    }
+
+    name = ctx->order->elts;
+    near = ctx->flag_postion;
+
+    for (i = 1; i < ctx->order->nelts; i++) {
+        if (name[i].len == module_name.len
+           && ngx_strncmp(name[i].data, module_name.data, name[i].len) == 0)
+        {
+            if (near <= ctx->flag_postion) {
+                ++ctx->flag_postion;
+            }
+
+            return near;
+        }
+
+        for (k = 0; ngx_module_names[k]; k++) {
+            len1 = ngx_strlen(ngx_module_names[k]);
+
+            if (len1 == name[i].len
+               && ngx_strncmp(name[i].data, ngx_module_names[k], name[i].len) == 0)
+            {
+                near = k + 1;
+                break;
+            }
+        }
+    }
+
+    return ++ctx->flag_postion;
+}
+
+
+void
+ngx_show_dso_modules(ngx_conf_t *cf)
+{
+    ngx_str_t                                 module_name;
+    ngx_uint_t                                i;
+    ngx_module_t                             *module;
+    ngx_dso_module_t                         *dl_m;
+    ngx_dso_conf_ctx_t                       *ctx;
+
+    ctx = (ngx_dso_conf_ctx_t *) ngx_get_conf(cf->cycle->conf_ctx,
+                                           ngx_dso_module);
+
+    if (ctx == NULL) {
+        return;
+    }
+
+    dl_m = ctx->modules->elts;
+
+    for (i = 0; i < ctx->modules->nelts; i++) {
+        if (dl_m[i].name.len == 0) {
+            continue;
+        }
+
+        module_name = dl_m[i].name;
+        module = dl_m[i].module;
+
+        ngx_log_stderr(0, "    %V (shared), require nginx version (%d.%d)",
+                       &module_name, module->major_version, module->minor_version);
+    }
+}
